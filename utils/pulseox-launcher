#!/bin/bash
# Launches the pulseox program
#
# I set a keyboard key to run this script, so family/caregivers/nurses
# can launch it easily.
#
# It'll kill a running version of itself if it finds any.
# *Note: It kills pretty much anything it finds with 'pulseox' in the
#        command line!

# To use:
# 1. Set po_bin= the path of your pulseox-bluetooth.py
# 2. Run this script, or map a shortcut to run it.

ourdir="$(dirname "$(readlink -f "$0")")"
ourname="${ourdir##*/}"
pbname=pulseox-bluetooth.py
pkname=pulseox-kill

# Find killer of running pulseox-bluetooth.py's
kill_locs=( "$ourdir/$pkname" "$ourdir/../$pkname" )
# Try to call pulseox-kill (with our PIDs excluded)
killdone=
for kl in "${kill_locs[@]}"; do
	if [[ -f "$kl" ]]; then
		"$kl" $$ $PPID  # Passing our pids to exclude from death
		killdone=1
		break
	fi
done
if [[ -z $killdone ]]; then
	echo "No known location of $pkname" >&2
	for kl in "${kill_locs[@]}"; do echo "Tried $kl" >&2; done
fi

# Find pulseox-bluetooth.py
po_bin="$ourdir/../$pbname"
env_bin="$ourdir/../env.sh"
if [[ ! -f $po_bin ]]; then
	po_bin="$ourdir/$pbname"
	env_bin="$ourdir/env.sh"
	if [[ ! -f $po_bin ]]; then
		echo "No known location of $pbname" >&2
		echo "Tried $ourdir" >&2
		echo "Tried $ourdir/.." >&2
		exit
	fi
fi

# Function to run command in tmux session
run_in_tmux() {
	local cmd=$1
	tmux has-session -t m 2>/dev/null || tmux new-session -d -s m

	# Check what is running in the first window
	pane_info=$(tmux list-panes -t m:0 -F "#{pane_current_command}")

	# If only bash is running in the first window
	if [ "$pane_info" = "bash" ]; then
		# Send the command to the first window
		tmux send-keys -t m:0 "$cmd" C-m
	else
		# Create a new window and send the command
		tmux new-window -t m -n 'pulseox'
		tmux send-keys -t m:pulseox "$cmd" C-m
	fi
}

echo "Trying to start venv..."
. "$env_bin"

echo "Executing $pbname in tmux m session..."
# Loop forever in case it errors out and it's not caught
run_in_tmux "$po_bin"
