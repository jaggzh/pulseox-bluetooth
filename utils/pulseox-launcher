#!/bin/bash
# exec 2>/tmp/polog
# Launches the pulseox program
#
# I set a keyboard key to run this script, so family/caregivers/nurses
# can launch it easily.
#
# It'll kill a running version of itself if it finds any.
# *Note: It kills pretty much anything it finds with 'pulseox' in the
#        command line!

# To use:
# 1. Set po_bin= the path of your pulseox-bluetooth.py
# 2. Run this script, or map a shortcut to run it.
we_ran_tracker_file=/tmp/pulseox-launcher-lock

ourdir="$(dirname "$(readlink -f "$0")")"
ourname="${ourdir##*/}"
pbname=pulseox-loop
pkname=pulseox-kill

. "$ourdir/fn.bash.filetime_within_ms"
play_warning () {
	play -q -n -c1 synth sin %-1 sin %-9 sin %-5 sin %-2 sin %-25 sin %-30 fade h 0.01 .5 .2
}

check_make_lock() {
  local filename=$1
  local time_ms=$2

  # Convert milliseconds to a suitable date format (subtract from current date)
  local datetime="$(date -d "@$(( $(date +%s) - time_ms / 1000 ))")"

  # Create the file if it doesn't exist
  if [ ! -f "$filename" ]; then
    touch "$filename"
    echo "File created successfully."
  else
    echo "File already exists."
  fi

  # Set the modification time
  touch -d "$datetime" "$filename"
}

# Try to acquire a lock, exit if cannot
check_make_lock "$we_ran_tracker_file" 4000
exec 200<$we_ran_tracker_file
if ! flock --verbose -n 200; then
	# Warning sound for those who hold buttons down
	echo "Couldn't obtain lock: $we_ran_tracker_file" >&2
	play_warning
    exit 1
fi
if [[ ! -f $we_ran_tracker_file ]]; then
	echo "Lockfile doesn't exist. Assuming all is well." >&2
elif filetime_within_ms "$we_ran_tracker_file" 3000; then
	echo "Lock is too young: $we_ran_tracker_file" >&2
	play_warning
	exit 1
fi
touch "$we_ran_tracker_file"
# Play soothing reward to those who don't know how to tap a kb button
play -qn synth -j 3 sin %3 sin %-2 sin %-5 sin %-9 sin %-14 sin %-21 fade h .01 2 1.5 delay 1.3 .5 .76 .54 .27 remix - fade h 0 2.3 .5 norm -1

# Find killer of running pulseox-bluetooth.py's
kill_locs=( "$ourdir/$pkname" "$ourdir/../$pkname" )
# Try to call pulseox-kill (with our PIDs excluded)
killdone=
for kl in "${kill_locs[@]}"; do
	if [[ -f "$kl" ]]; then
		"$kl" $$ $PPID  # Passing our pids to exclude from death
		killdone=1
		break
	fi
done
if [[ -z $killdone ]]; then
	echo "No known location of $pkname" >&2
	for kl in "${kill_locs[@]}"; do echo "Tried $kl" >&2; done
fi

# Find pulseox-bluetooth.py
po_bin="$ourdir/../$pbname"
env_bin="$ourdir/../env.sh"
if [[ ! -f $po_bin ]]; then
	po_bin="$ourdir/$pbname"
	env_bin="$ourdir/env.sh"
	if [[ ! -f $po_bin ]]; then
		echo "No known location of $pbname" >&2
		echo "Tried $ourdir" >&2
		echo "Tried $ourdir/.." >&2
		exit
	fi
fi

# Function to run command in tmux session
run_in_tmux() {
	local cmd=$1
	tmux has-session -t m 2>/dev/null || tmux new-session -d -s m

	# Check what is running in the first window
	pane_info=$(tmux list-panes -t m:0 -F "#{pane_current_command}")

	# If only bash is running in the first window
	if [ "$pane_info" = "bash" ]; then
		# Send the command to the first window
		tmux send-keys -t m:0 "$cmd" C-m
	else
		# Create a new window and send the command
		tmux new-window -t m -n 'pulseox'
		tmux send-keys -t m:pulseox "$cmd" C-m
	fi
}

echo "Trying to start venv..."
if [[ -x $env_bin ]]; then
	. "$env_bin"
elif [[ -x ../$env_bin ]]; then
	. "../$env_bin"
fi

echo "Executing $po_bin in tmux m session..."
run_in_tmux "$po_bin"
